Nauji klausimai:
	-kaip vadinti dto? Kaip geriau isdestyti tas tris dalis? Ar ju visu reikia? 
		[http method][objectname][response|request|responsebody|requestbody]
			GetStageResponseBody
	-decouplinimas yra gerai -  Kada geriau NEdecoupliti? 
		Kada decouplinimas kenkia? 
		Kaip del microservisu?
		

Seni Klausimai:
	+Kiap dėl new, kuris yra mapinime / kur negalima declarinti nieko, so no DI?
		Servisam galioja; domain/dto ok
		per interface'us reikia daryti
	+Maping classes' naming conventions?
		extensions pas mane
	+Do we need a DB or is SQLite ok?
		Docker + postgres
	+kaip daryti su scope factory? Taip tinka? (all services - dbcontext injection)
		Reikia transient daryti, ne scope
----------

Kiap updatinti ef:
	atsidaryti package manager console
	defauilt project Treehoot.Infrastructure
	"add-migrations <name>" komanda
	"update-database" komanda

	or .net cli

	dotnet ef migrations add testnoinfra2 --project .\Treehoot.Infrastructure\ --startup-project .\Treehoot.Api\
	dotnet ef database update --project .\Treehoot.Infrastructure\ --startup-project .\Treehoot.Api\

Kaip updaitnti db:
	save changes in docker;
	docker commit PostgresDB treehoot-postgre-db
	exportinti docker image: docker save treehoot-postgre-db -o treehoot-postrge-db
	pasidalinti su draugais lmao
	loadinti nauja image'a: docker load -i treehoot-postgre-db-1122.tar
	docker desktop is image containeri reikia pasidaryti: name PostgresDB, port localhost:5432

----------

Todo
	Extention toResponse methods for domain klases (returns DTO objects):
	error handling of null responses from db context. Should be in service I think
	fix get full object metodus; dabar jie broken / grazina tuscius objektus. 
		Reikia overhaulinti modeliu naudojima, pradeti naudoti labai daug skirtingu dto
		pazymeti //broken
	change db password, configure sevret passwords
	pakeisti visus servisus, kur naudojamas db context, kad visur butu async await

----------
Projektų struktūra
Main projetai:

Api

*** roles
-controlers
-- 1 eilutė
-- nereikia net try catch, nes kitur susitvarko
--- nebent ultra prasmingai
- middleware
- config
- maping*
-- kiti mano, kad application layeryje
-- data -> dto
*** directories / files
- startup
-- suregistruojami servisai

Application

- business logic
-servisai
-- tai, kas vyksta
-- rūšioujami, pagal tai, ką daro
- maping*
-- kiti mano api layeryje
- dbcontext
-- repo, kuri nežino, apie pačią duombazę
--- gali prie betkokios DBMS prisijungti

Contracts

Domain

- Domain classes
-- keliauja tiesiai į duombazę	
-- atsako už pagrindinę logiką
-- gali būti:
--- tik modeliai 
--- gali būti logikos krūva sudėta (model driven development)

Infrastructure

- Konkretūs duombazių dalykai 
-- sql
-- indeksai
- išoriniai client'ai
-- implementuoja POST, GET...

********************

Biznio logika glai būti Domain klasėse / Application servisuose

Api žino apie Application, Domain Infrastructure
Application žino apie Domain
Infrastructure žino apie Application
Domain nieko nežinon